{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "HandleMsg",
  "anyOf": [
    {
      "description": "Receiver interface function for SNIP721 contract. Msg to be received from SNIP721 contract BatchReceiveNft may be a HandleMsg variant of any contract that wants to implement a receiver interface.  BatchReceiveNft, which is more informative and more efficient, is preferred over ReceiveNft.",
      "type": "object",
      "required": [
        "batch_receive_nft"
      ],
      "properties": {
        "batch_receive_nft": {
          "type": "object",
          "required": [
            "from",
            "sender",
            "token_ids"
          ],
          "properties": {
            "from": {
              "description": "previous owner of sent tokens.  This is equivalent to the ReceiveNft `sender` field",
              "allOf": [
                {
                  "$ref": "#/definitions/HumanAddr"
                }
              ]
            },
            "msg": {
              "description": "optional message to control receiving logic",
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            },
            "sender": {
              "description": "address that sent the tokens.  There is no ReceiveNft field equivalent to this",
              "allOf": [
                {
                  "$ref": "#/definitions/HumanAddr"
                }
              ]
            },
            "token_ids": {
              "description": "tokens that were sent",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    {
      "description": "Transfers an NFT owned by this contract",
      "type": "object",
      "required": [
        "transfer_nft"
      ],
      "properties": {
        "transfer_nft": {
          "type": "object",
          "required": [
            "nft_contr_addr",
            "nft_contr_hash",
            "recipient",
            "token_id"
          ],
          "properties": {
            "nft_contr_addr": {
              "$ref": "#/definitions/HumanAddr"
            },
            "nft_contr_hash": {
              "type": "string"
            },
            "recipient": {
              "$ref": "#/definitions/HumanAddr"
            },
            "token_id": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "description": "Receiver for InitResponse callback from ftoken contract",
      "type": "object",
      "required": [
        "receive_ftoken_callback"
      ],
      "properties": {
        "receive_ftoken_callback": {
          "type": "object",
          "required": [
            "ftkn_instance"
          ],
          "properties": {
            "ftkn_instance": {
              "$ref": "#/definitions/FtokenInstance"
            }
          }
        }
      }
    },
    {
      "description": "User calls this function to fractionalize an NFT User must first give permission to fractionalizer to transfer the NFT",
      "type": "object",
      "required": [
        "fractionalize"
      ],
      "properties": {
        "fractionalize": {
          "type": "object",
          "required": [
            "ftkn_init",
            "nft_info"
          ],
          "properties": {
            "ftkn_init": {
              "description": "configuration of fractionalized token",
              "allOf": [
                {
                  "$ref": "#/definitions/FtokenInit"
                }
              ]
            },
            "nft_info": {
              "description": "Underlying NFT information token id and SNIP721 contract address and hash",
              "allOf": [
                {
                  "$ref": "#/definitions/UndrNftInfo"
                }
              ]
            }
          }
        }
      }
    }
  ],
  "definitions": {
    "AucConf": {
      "description": "ftoken config for bidding. Nested in a larger struct",
      "type": "object",
      "required": [
        "auc_period",
        "bid_token",
        "min_bid_inc",
        "resv_boundary",
        "unlock_threshold"
      ],
      "properties": {
        "auc_period": {
          "description": "Number of blocks that a bid remains live before a finalize_vote_count tx can be called",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "bid_token": {
          "description": "Determines the token that bids are made in (eg: sSCRT)",
          "allOf": [
            {
              "$ref": "#/definitions/ContractInfo"
            }
          ]
        },
        "min_bid_inc": {
          "description": "Min bid increment proportion in basis points ie: 1/10_000. So a setting of 10 means that if the current highest bid is 100_000 tokens, the next bid needs to be at least 1/1000 higher, or 100_100 tokens",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "resv_boundary": {
          "description": "User needs to vote a reservation price within this boundary. Boundary is the percentage above and below current reservation price. Floor = `current reservation price` * 100 / `minmax_boundary`. Ceiling = `current reservation price` * `minmax_boundary` / 100.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "unlock_threshold": {
          "description": "Proportion of ftoken OF TOTAL SUPPLY before NFT gets unlocked. Unit in basis points (1/1000)",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      }
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "ContractInfo": {
      "description": "code hash and address of a contract",
      "type": "object",
      "required": [
        "address",
        "code_hash"
      ],
      "properties": {
        "address": {
          "description": "Contract's address in HumanAddr",
          "allOf": [
            {
              "$ref": "#/definitions/HumanAddr"
            }
          ]
        },
        "code_hash": {
          "description": "Contract's code hash string",
          "type": "string"
        }
      }
    },
    "FtokenConf": {
      "description": "ftoken overall config which is stored in the ftoken contract. Sent as init in fractionalize tx, and stored in ftoken contract",
      "type": "object",
      "required": [
        "auc_conf",
        "min_ftkn_bond_prd",
        "priv_metadata_view_threshold",
        "prop_conf"
      ],
      "properties": {
        "auc_conf": {
          "description": "Configurations for auctions",
          "allOf": [
            {
              "$ref": "#/definitions/AucConf"
            }
          ]
        },
        "min_ftkn_bond_prd": {
          "description": "Number of blocks that ftokens will be bonded after a vote (on reservation price or on proposals). Important to prevent vote spamming and manipulation",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "priv_metadata_view_threshold": {
          "description": "Proportion of ftoken ownership required before private metadata of underlying NFT can be queried by ftoken owner. This needs to be done with authenticated query, either through viewing keys or viewing permit. Unit in basis points (ie: 1/10_000)",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "prop_conf": {
          "description": "Configurations for proposals",
          "allOf": [
            {
              "$ref": "#/definitions/PropConf"
            }
          ]
        }
      }
    },
    "FtokenInit": {
      "description": "Part of initialization message sent by USERS to fractionalizer initial configuration of fractionalized tokens",
      "type": "object",
      "required": [
        "contract_label",
        "decimals",
        "ftkn_conf",
        "init_resv_price",
        "name",
        "supply",
        "symbol"
      ],
      "properties": {
        "contract_label": {
          "description": "Label String of the ftoken contract which will be instantiated. Instantiation of the new ftoken contract will fail if the label already exists on another contract on Secret Network",
          "type": "string"
        },
        "decimals": {
          "description": "Determines the lowest denomination",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "ftkn_conf": {
          "description": "ftoken config which is stored in the ftoken contract",
          "allOf": [
            {
              "$ref": "#/definitions/FtokenConf"
            }
          ]
        },
        "init_resv_price": {
          "description": "Initial reservation price which determines the initial min and max reservation price vote for the first user who votes on reservation price",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "name": {
          "description": "Name of the ftoken",
          "type": "string"
        },
        "supply": {
          "description": "Supply in the lowest denomination",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "symbol": {
          "description": "Symbol of the ftoken",
          "type": "string"
        }
      }
    },
    "FtokenInstance": {
      "description": "ftoken contract information created at initialization, stored directly in fractionalizer contract, also within the FtokenInfo struct stored in ftoken contracts",
      "type": "object",
      "required": [
        "decimals",
        "depositor",
        "ftkn_idx",
        "ftoken_contr",
        "init_nft_info",
        "name",
        "symbol"
      ],
      "properties": {
        "decimals": {
          "description": "Decimal of ftoken",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "depositor": {
          "description": "Address which deposited the nft",
          "allOf": [
            {
              "$ref": "#/definitions/HumanAddr"
            }
          ]
        },
        "ftkn_idx": {
          "description": "ftoken contract index from the fractionalizer contract's perspective",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "ftoken_contr": {
          "description": "Code hash and address of ftoken contract",
          "allOf": [
            {
              "$ref": "#/definitions/ContractInfo"
            }
          ]
        },
        "init_nft_info": {
          "description": "Information on the underlying nft that was initially deposited",
          "allOf": [
            {
              "$ref": "#/definitions/UndrNftInfo"
            }
          ]
        },
        "name": {
          "description": "Name of ftoken",
          "type": "string"
        },
        "symbol": {
          "description": "Symbol of ftoken",
          "type": "string"
        }
      }
    },
    "HumanAddr": {
      "type": "string"
    },
    "PropConf": {
      "description": "ftoken contract config for dao proposals. Nested in a larger struct",
      "type": "object",
      "required": [
        "min_stake",
        "veto_threshold",
        "vote_period",
        "vote_quorum"
      ],
      "properties": {
        "min_stake": {
          "description": "Minimum ftoken stake to make a proposal",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "veto_threshold": {
          "description": "Proportion of ftoken-weighted votes OF TOTAL SUPPLY that needs to vote `veto` for a veto to apply. Unit in basis points (1/1000)",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "vote_period": {
          "description": "Number of blocks that a proposal remains live before a finalization tx can be called",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "vote_quorum": {
          "description": "Proportion of ftoken-weighted votes OF TOTAL SUPPLY before quorum is reached. Unit in basis points (1/1000)",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      }
    },
    "Uint128": {
      "type": "string"
    },
    "UndrNftInfo": {
      "description": "underlying NFT information",
      "type": "object",
      "required": [
        "nft_contr",
        "token_id"
      ],
      "properties": {
        "nft_contr": {
          "description": "Contract code hash and address of contract of underlying nft",
          "allOf": [
            {
              "$ref": "#/definitions/ContractInfo"
            }
          ]
        },
        "token_id": {
          "description": "Token id of underlying nft",
          "type": "string"
        }
      }
    }
  }
}
