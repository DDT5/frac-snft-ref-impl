{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "FtokenQueryAnswer",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "ftoken_info"
      ],
      "properties": {
        "ftoken_info": {
          "type": "object",
          "required": [
            "ftkn_info"
          ],
          "properties": {
            "ftkn_info": {
              "$ref": "#/definitions/FtokenInfo"
            }
          }
        }
      }
    },
    {
      "type": "object",
      "required": [
        "ftoken_config"
      ],
      "properties": {
        "ftoken_config": {
          "type": "object",
          "required": [
            "ftkn_conf"
          ],
          "properties": {
            "ftkn_conf": {
              "$ref": "#/definitions/FtokenConf"
            }
          }
        }
      }
    },
    {
      "type": "object",
      "required": [
        "auction_config"
      ],
      "properties": {
        "auction_config": {
          "type": "object",
          "required": [
            "auc_conf"
          ],
          "properties": {
            "auc_conf": {
              "$ref": "#/definitions/AucConf"
            }
          }
        }
      }
    },
    {
      "type": "object",
      "required": [
        "proposal_config"
      ],
      "properties": {
        "proposal_config": {
          "type": "object",
          "required": [
            "prop_conf"
          ],
          "properties": {
            "prop_conf": {
              "$ref": "#/definitions/PropConf"
            }
          }
        }
      }
    },
    {
      "type": "object",
      "required": [
        "reservation_price"
      ],
      "properties": {
        "reservation_price": {
          "type": "object",
          "required": [
            "ftokens_voted",
            "reservation_price"
          ],
          "properties": {
            "ftokens_voted": {
              "$ref": "#/definitions/Uint128"
            },
            "reservation_price": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      }
    },
    {
      "type": "object",
      "required": [
        "proposal_list"
      ],
      "properties": {
        "proposal_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PropInfoTally"
          }
        }
      }
    },
    {
      "type": "object",
      "required": [
        "bid_list"
      ],
      "properties": {
        "bid_list": {
          "type": "object",
          "required": [
            "bid_amounts",
            "total_bids"
          ],
          "properties": {
            "bid_amounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "total_bids": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      }
    },
    {
      "type": "object",
      "required": [
        "nft_private_metadata"
      ],
      "properties": {
        "nft_private_metadata": {
          "$ref": "#/definitions/PrivateMetadataResponse"
        }
      }
    },
    {
      "type": "object",
      "required": [
        "nft_dossier"
      ],
      "properties": {
        "nft_dossier": {
          "$ref": "#/definitions/NftDossierResponse"
        }
      }
    },
    {
      "type": "object",
      "required": [
        "staked_tokens"
      ],
      "properties": {
        "staked_tokens": {
          "$ref": "#/definitions/StakedTokens"
        }
      }
    },
    {
      "type": "object",
      "required": [
        "reservation_price_vote"
      ],
      "properties": {
        "reservation_price_vote": {
          "$ref": "#/definitions/ResvVote"
        }
      }
    },
    {
      "type": "object",
      "required": [
        "proposal_votes"
      ],
      "properties": {
        "proposal_votes": {
          "$ref": "#/definitions/VoteRegister"
        }
      }
    },
    {
      "type": "object",
      "required": [
        "bid"
      ],
      "properties": {
        "bid": {
          "$ref": "#/definitions/BidInfo"
        }
      }
    }
  ],
  "definitions": {
    "AccessLevel": {
      "description": "permission access level",
      "type": "string",
      "enum": [
        "approve_token",
        "all",
        "revoke_token",
        "none"
      ]
    },
    "AllowedNftMsg": {
      "description": "List of messages that is allowed to be sent to underlying NFT. ftoken holders can propose to send these messages to the underlying NFT, where other ftoken holders vote on whether to accept the proposal. Once a proposal passes, a transaction can be triggered to send the proposed message to the underlying NFT",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "set_metadata"
          ],
          "properties": {
            "set_metadata": {
              "type": "object",
              "properties": {
                "private_metadata": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Metadata"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "public_metadata": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Metadata"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "reveal"
          ],
          "properties": {
            "reveal": {
              "type": "object"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "make_ownership_private"
          ],
          "properties": {
            "make_ownership_private": {
              "type": "object"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "set_global_approval"
          ],
          "properties": {
            "set_global_approval": {
              "type": "object",
              "properties": {
                "expires": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Expiration"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "view_owner": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/AccessLevel"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "view_private_metadata": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/AccessLevel"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "set_whitelisted_approval"
          ],
          "properties": {
            "set_whitelisted_approval": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/HumanAddr"
                },
                "expires": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Expiration"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "view_owner": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/AccessLevel"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "view_private_metadata": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/AccessLevel"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          }
        }
      ]
    },
    "AucConf": {
      "description": "ftoken config for bidding. Nested in a larger struct",
      "type": "object",
      "required": [
        "auc_period",
        "bid_token",
        "min_bid_inc",
        "resv_boundary",
        "unlock_threshold"
      ],
      "properties": {
        "auc_period": {
          "description": "Number of blocks that a bid remains live before a finalize_vote_count tx can be called",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "bid_token": {
          "description": "Determines the token that bids are made in (eg: sSCRT)",
          "allOf": [
            {
              "$ref": "#/definitions/ContractInfo"
            }
          ]
        },
        "min_bid_inc": {
          "description": "Min bid increment proportion in basis points ie: 1/10_000. So a setting of 10 means that if the current highest bid is 100_000 tokens, the next bid needs to be at least 1/1000 higher, or 100_100 tokens",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "resv_boundary": {
          "description": "User needs to vote a reservation price within this boundary. Boundary is the percentage above and below current reservation price. Floor = `current reservation price` * 100 / `minmax_boundary`. Ceiling = `current reservation price` * `minmax_boundary` / 100.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "unlock_threshold": {
          "description": "Proportion of ftoken OF TOTAL SUPPLY before NFT gets unlocked. Unit in basis points (1/1000)",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      }
    },
    "BidInfo": {
      "description": "bid information as stored by ftoken contract",
      "type": "object",
      "required": [
        "amount",
        "bidder",
        "retrieved_bid",
        "winning_bid"
      ],
      "properties": {
        "amount": {
          "description": "amount denominated in the approved bid token",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "bidder": {
          "$ref": "#/definitions/HumanAddr"
        },
        "retrieved_bid": {
          "description": "has the bidder retrieved the bid",
          "type": "boolean"
        },
        "winning_bid": {
          "description": "did the bid win?",
          "type": "boolean"
        }
      }
    },
    "ContractInfo": {
      "description": "code hash and address of a contract",
      "type": "object",
      "required": [
        "address",
        "code_hash"
      ],
      "properties": {
        "address": {
          "description": "Contract's address in HumanAddr",
          "allOf": [
            {
              "$ref": "#/definitions/HumanAddr"
            }
          ]
        },
        "code_hash": {
          "description": "Contract's code hash string",
          "type": "string"
        }
      }
    },
    "Expiration": {
      "description": "at the given point in time and after, Expiration will be considered expired",
      "anyOf": [
        {
          "type": "string",
          "enum": [
            "never"
          ]
        },
        {
          "description": "expires at this block height",
          "type": "object",
          "required": [
            "at_height"
          ],
          "properties": {
            "at_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        {
          "description": "expires at the time in seconds since 01/01/1970",
          "type": "object",
          "required": [
            "at_time"
          ],
          "properties": {
            "at_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      ]
    },
    "FtokenConf": {
      "description": "ftoken overall config which is stored in the ftoken contract. Sent as init in fractionalize tx, and stored in ftoken contract",
      "type": "object",
      "required": [
        "auc_conf",
        "min_ftkn_bond_prd",
        "priv_metadata_view_threshold",
        "prop_conf"
      ],
      "properties": {
        "auc_conf": {
          "description": "Configurations for auctions",
          "allOf": [
            {
              "$ref": "#/definitions/AucConf"
            }
          ]
        },
        "min_ftkn_bond_prd": {
          "description": "Number of blocks that ftokens will be bonded after a vote (on reservation price or on proposals). Important to prevent vote spamming and manipulation",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "priv_metadata_view_threshold": {
          "description": "Proportion of ftoken ownership required before private metadata of underlying NFT can be queried by ftoken owner. This needs to be done with authenticated query, either through viewing keys or viewing permit. Unit in basis points (ie: 1/10_000)",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "prop_conf": {
          "description": "Configurations for proposals",
          "allOf": [
            {
              "$ref": "#/definitions/PropConf"
            }
          ]
        }
      }
    },
    "FtokenInfo": {
      "description": "ftoken contract information, stored in ftoken contracts",
      "type": "object",
      "required": [
        "instance",
        "vault_active"
      ],
      "properties": {
        "instance": {
          "description": "ftoken contract instance information, created at initialization",
          "allOf": [
            {
              "$ref": "#/definitions/FtokenInstance"
            }
          ]
        },
        "vault_active": {
          "description": "Is underlying nft still in the vault (ie: fractionalized)",
          "type": "boolean"
        }
      }
    },
    "FtokenInstance": {
      "description": "ftoken contract information created at initialization, stored directly in fractionalizer contract, also within the FtokenInfo struct stored in ftoken contracts",
      "type": "object",
      "required": [
        "decimals",
        "depositor",
        "ftkn_idx",
        "ftoken_contr",
        "init_nft_info",
        "name",
        "symbol"
      ],
      "properties": {
        "decimals": {
          "description": "Decimal of ftoken",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "depositor": {
          "description": "Address which deposited the nft",
          "allOf": [
            {
              "$ref": "#/definitions/HumanAddr"
            }
          ]
        },
        "ftkn_idx": {
          "description": "ftoken contract index from the fractionalizer contract's perspective",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "ftoken_contr": {
          "description": "Code hash and address of ftoken contract",
          "allOf": [
            {
              "$ref": "#/definitions/ContractInfo"
            }
          ]
        },
        "init_nft_info": {
          "description": "Information on the underlying nft that was initially deposited",
          "allOf": [
            {
              "$ref": "#/definitions/UndrNftInfo"
            }
          ]
        },
        "name": {
          "description": "Name of ftoken",
          "type": "string"
        },
        "symbol": {
          "description": "Symbol of ftoken",
          "type": "string"
        }
      }
    },
    "HumanAddr": {
      "type": "string"
    },
    "Metadata": {
      "description": "token metadata",
      "type": "object",
      "properties": {
        "description": {
          "description": "optional description",
          "type": [
            "string",
            "null"
          ]
        },
        "image": {
          "description": "optional uri to contain an image, additional data fields, etc...",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "optional indentifier",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "NftDossier": {
      "description": "response of [`NftDossier`](QueryMsg::NftDossier)\n\ndisplays all the information about a token that the viewer has permission to see.  This may include the owner, the public metadata, the private metadata, and the token and inventory approvals",
      "type": "object",
      "required": [
        "owner_is_public",
        "private_metadata_is_public"
      ],
      "properties": {
        "display_private_metadata_error": {
          "description": "description of why private metadata is not displayed (if applicable)",
          "type": [
            "string",
            "null"
          ]
        },
        "inventory_approvals": {
          "description": "approvals that apply to this token because they apply to all of the owner's tokens (only viewable if queried by the owner)",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Snip721Approval"
          }
        },
        "owner": {
          "description": "owner of the token if permitted to view it",
          "anyOf": [
            {
              "$ref": "#/definitions/HumanAddr"
            },
            {
              "type": "null"
            }
          ]
        },
        "owner_is_public": {
          "description": "true if the owner is publicly viewable",
          "type": "boolean"
        },
        "private_metadata": {
          "description": "the token's private metadata if permitted to view it",
          "anyOf": [
            {
              "$ref": "#/definitions/Metadata"
            },
            {
              "type": "null"
            }
          ]
        },
        "private_metadata_is_public": {
          "description": "true if private metadata is publicly viewable",
          "type": "boolean"
        },
        "private_metadata_is_public_expiration": {
          "description": "expiration of public display of private metadata (if applicable)",
          "anyOf": [
            {
              "$ref": "#/definitions/Expiration"
            },
            {
              "type": "null"
            }
          ]
        },
        "public_metadata": {
          "description": "the token's public metadata",
          "anyOf": [
            {
              "$ref": "#/definitions/Metadata"
            },
            {
              "type": "null"
            }
          ]
        },
        "public_ownership_expiration": {
          "description": "expiration of public display of ownership (if applicable)",
          "anyOf": [
            {
              "$ref": "#/definitions/Expiration"
            },
            {
              "type": "null"
            }
          ]
        },
        "token_approvals": {
          "description": "approvals for this token (only viewable if queried by the owner)",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Snip721Approval"
          }
        }
      }
    },
    "NftDossierResponse": {
      "description": "wrapper to deserialize `NftDossier` responses, with additional implementations above the standard implementation in `secret_toolkit`",
      "type": "object",
      "required": [
        "nft_dossier"
      ],
      "properties": {
        "nft_dossier": {
          "$ref": "#/definitions/NftDossier"
        }
      }
    },
    "PrivateMetadataResponse": {
      "description": "wrapper to deserialize `PrivateMetadata` responses, with additional implementations /// above the standard implementation in `secret_toolkit`",
      "type": "object",
      "required": [
        "private_metadata"
      ],
      "properties": {
        "private_metadata": {
          "$ref": "#/definitions/Metadata"
        }
      }
    },
    "PropConf": {
      "description": "ftoken contract config for dao proposals. Nested in a larger struct",
      "type": "object",
      "required": [
        "min_stake",
        "veto_threshold",
        "vote_period",
        "vote_quorum"
      ],
      "properties": {
        "min_stake": {
          "description": "Minimum ftoken stake to make a proposal",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "veto_threshold": {
          "description": "Proportion of ftoken-weighted votes OF TOTAL SUPPLY that needs to vote `veto` for a veto to apply. Unit in basis points (1/1000)",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "vote_period": {
          "description": "Number of blocks that a proposal remains live before a finalization tx can be called",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "vote_quorum": {
          "description": "Proportion of ftoken-weighted votes OF TOTAL SUPPLY before quorum is reached. Unit in basis points (1/1000)",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      }
    },
    "PropInfo": {
      "description": "proposal information as stored by ftoken contract",
      "type": "object",
      "required": [
        "end_height",
        "prop_id",
        "proposal",
        "proposer",
        "stake",
        "stake_withdrawn"
      ],
      "properties": {
        "end_height": {
          "description": "block height where voting period ends. Final count tx can be called at this point forward",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "outcome": {
          "description": "outcome. If still in voting, `outcome` = `None`. If vote has been finalized, `outcome` = `VoteResult`",
          "anyOf": [
            {
              "$ref": "#/definitions/VoteResult"
            },
            {
              "type": "null"
            }
          ]
        },
        "prop_id": {
          "description": "proposal identifier",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "proposal": {
          "description": "proposal",
          "allOf": [
            {
              "$ref": "#/definitions/Proposal"
            }
          ]
        },
        "proposer": {
          "description": "address of proposer",
          "allOf": [
            {
              "$ref": "#/definitions/HumanAddr"
            }
          ]
        },
        "stake": {
          "description": "ftoken staked",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "stake_withdrawn": {
          "description": "has the stake been withdrawn?",
          "type": "boolean"
        }
      }
    },
    "PropInfoTally": {
      "type": "object",
      "required": [
        "prop_info",
        "vote_tally"
      ],
      "properties": {
        "prop_info": {
          "$ref": "#/definitions/PropInfo"
        },
        "vote_tally": {
          "$ref": "#/definitions/VoteRegister"
        }
      }
    },
    "Proposal": {
      "description": "DAO proposals that an ftoken holder can make. A minimum amount of tokens need to be staked along with proposals",
      "anyOf": [
        {
          "description": "Proposal to send a message to the underlying NFT",
          "type": "object",
          "required": [
            "msg_to_nft"
          ],
          "properties": {
            "msg_to_nft": {
              "type": "object",
              "required": [
                "msg"
              ],
              "properties": {
                "msg": {
                  "$ref": "#/definitions/AllowedNftMsg"
                }
              }
            }
          }
        },
        {
          "description": "Proposals to change the ftoken configuration, which includes auction configurations and DAO configurations",
          "type": "object",
          "required": [
            "change_config"
          ],
          "properties": {
            "change_config": {
              "type": "object",
              "required": [
                "config"
              ],
              "properties": {
                "config": {
                  "$ref": "#/definitions/FtokenConf"
                }
              }
            }
          }
        }
      ]
    },
    "ResvVote": {
      "description": "Reservation price and stake stored in binary (serialized U192) representing a Uint128 with additional 19 decimal points",
      "type": "object",
      "required": [
        "price",
        "stake"
      ],
      "properties": {
        "price": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "maxItems": 24,
          "minItems": 24
        },
        "stake": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "maxItems": 24,
          "minItems": 24
        }
      }
    },
    "Snip721Approval": {
      "description": "SNIP721 Approval",
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "description": "whitelisted address",
          "allOf": [
            {
              "$ref": "#/definitions/HumanAddr"
            }
          ]
        },
        "transfer_expiration": {
          "description": "optional expiration if the address has transfer permission",
          "anyOf": [
            {
              "$ref": "#/definitions/Expiration"
            },
            {
              "type": "null"
            }
          ]
        },
        "view_owner_expiration": {
          "description": "optional expiration if the address has view owner permission",
          "anyOf": [
            {
              "$ref": "#/definitions/Expiration"
            },
            {
              "type": "null"
            }
          ]
        },
        "view_private_metadata_expiration": {
          "description": "optional expiration if the address has view private metadata permission",
          "anyOf": [
            {
              "$ref": "#/definitions/Expiration"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "StakedTokens": {
      "type": "object",
      "required": [
        "amount",
        "unlock_height"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "unlock_height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "type": "string"
    },
    "UndrNftInfo": {
      "description": "underlying NFT information",
      "type": "object",
      "required": [
        "nft_contr",
        "token_id"
      ],
      "properties": {
        "nft_contr": {
          "description": "Contract code hash and address of contract of underlying nft",
          "allOf": [
            {
              "$ref": "#/definitions/ContractInfo"
            }
          ]
        },
        "token_id": {
          "description": "Token id of underlying nft",
          "type": "string"
        }
      }
    },
    "VoteRegister": {
      "type": "object",
      "required": [
        "abstain",
        "no",
        "veto",
        "yes"
      ],
      "properties": {
        "abstain": {
          "$ref": "#/definitions/Uint128"
        },
        "no": {
          "$ref": "#/definitions/Uint128"
        },
        "veto": {
          "$ref": "#/definitions/Uint128"
        },
        "yes": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "VoteResult": {
      "type": "string",
      "enum": [
        "Won",
        "Lost",
        "LostWithVeto"
      ]
    }
  }
}
